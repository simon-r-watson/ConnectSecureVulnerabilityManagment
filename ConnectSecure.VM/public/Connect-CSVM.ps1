function Connect-CSVM {
    <#
    .SYNOPSIS
        Connect to the CyberCNS/ConnectSecure Vulnerability Management API
    .DESCRIPTION
        Connect to the CyberCNS/ConnectSecure Vulnerability Management API
    .PARAMETER ClientID
        Client ID for CyberCNS/ConnectSecure. Generated under Global > Users > Select user
    .PARAMETER ClientSecret
        Client Secret for CyberCNS/ConnectSecure. Generated under Global > Users > Select user
    .PARAMETER Url
        Url of your CyberCNS/ConnectSecure tenant. For example, Australian tenants may be 'https://portalapsoutheast2.mycybercns.com'
    .PARAMETER Tenant
        The ID of your tenant. This is the ID/domain you initially enter on the login page.
    .EXAMPLE
        $clientId = Read-Host -Prompt "Client ID"
        $clientSecret = Read-Host -Prompt "Client Secret" -AsSecureString
        $url = 'https://portalapsoutheast2.mycybercns.com'
        $tenant = 'contoso'
        Connect-CSVM -ClientID $clientId -ClientSecret $clientSecret -Url 'https://portalapsoutheast2.mycybercns.com' -Tenant 'contoso'
    #>
    [CmdletBinding()]
    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('AvoidUsingConvertToSecureStringWithPlainText', '', Justification = 'SecureStrings main usage is to stop items from appearing in the console, and not encrypting memory', Scope = 'Function')]
    param (
        [Parameter(Mandatory = $true,
            ParameterSetName = 'StdAuth')]
        [String]$ClientID,

        [Parameter(ParameterSetName = 'StdAuth')]
        [SecureString]$ClientSecret,

        [String]$Url,

        [String]$Tenant
    )

    if ($url[-1] -eq '/') {
        $url = $url.TrimEnd('/')
    }

    $SCRIPT:CSVMAuth = @{
        clientId     = $ClientID
        clientSecret = $ClientSecret
        tenant       = $Tenant
        url          = $Url
        customerId   = $null
    }

    #Get Companies to test auth
    $url = $url + '/api/company/'
    $headers = Get-CSVMAuthHeader

    try {
        Invoke-RestMethod -Uri $Url -Headers $headers | Out-Null
    } catch {
        Write-Error 'Error connecting to API, check creds and server'
        Write-Debug $_
        Remove-Variable -Name 'CSVMAuth' -Scope 'SCRIPT'
    }
}
