function Invoke-CSVMWebRequest {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [System.URI]$Uri,

        [System.Collections.Hashtable]$CustomHeader,

        [ValidateSet('Get', 'Post', 'Put', 'Delete')]
        [string]$Method = 'Get',

        [System.Collections.Hashtable]$Body
    )

    if ($PSVersionTable.PSVersion.Major -lt 7) {
        Write-Warning 'Unsupported version of PowerShell detected'
    }

    if ($null -ne $CustomHeader) {
        $header = $CustomHeader
    } else {
        try {
            $header = Get-CSVMAuthHeader
        } catch {
            throw $_
        }
    }

    if (($null -eq $body) -and ($Method -in ('Post', 'Put'))) {
        $bodyTmp = @{} | ConvertTo-Json
        $webRequest.Add('Body', $bodyTmp)
    } elseif (($null -ne $Body) -and ($Method -eq 'Get')) {
        $webRequest.Add('Body', $Body)
    } elseif ($null -ne $Body) {
        $webRequest.Add('Body', ($Body | ConvertTo-Json -Depth 5))
    }

    #inital request
    $parameters = @{
        skip  = 0
        limit = 100
    }
    $uriInitial = New-UriWithQuery -Uri $uri -Query $parameters
    $webRequest = @{
        Uri             = $uriInitial
        Headers         = $header
        UseBasicParsing = $true
        Method          = $Method
    }

    #query api and return the first page
    $response = Invoke-RestMethod @webRequest
    if ($null -ne $response.data) {
        $response.data
    } else {
        $response
    }

    #add pagination here
    $count = $response.count
    while ($count -lt $response.total) {
        $parameters['skip'] += 100
        $webRequest['uri'] = New-UriWithQuery -Uri $uri -Query $parameters
        $response = Invoke-RestMethod @webRequest
        if ($null -ne $response.data) {
            $response.data
            $count += $response.data.count
        } else {
            $response
            $count += $response.count
        }
    }
}
